<?php

/*
 * This file is part of the nodika project.
 *
 * (c) Florian Moser <git@famoser.ch>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\Repository;

use App\Entity\EventLine;
use App\Entity\FrontendUser;
use App\Entity\Member;
use App\Model\Event\SearchModel;
use App\Model\EventLine\EventLineModel;
use Doctrine\ORM\EntityRepository;

/**
 * EventLineRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventLineRepository extends EntityRepository
{

    /**
     * @param SearchModel $searchEventModel
     *
     * @return EventLineModel[]
     */
    public function findEventLineModels(SearchModel $searchEventModel)
    {
        $res = [];

        //get event lines to be converted
        $eventLines = [];
        if ($searchEventModel->getEventLine() instanceof EventLine) {
            $eventLines[] = $searchEventModel->getEventLine();
        } else {
            $eventLines = $this->findAll();
        }

        //construct query for each event line
        foreach ($eventLines as $eventLine) {
            $eventLineModel = new EventLineModel();
            $eventLineModel->eventLine = $eventLine;

            $qb = $this->getEntityManager()->createQueryBuilder()
                ->select('e')
                ->from('App:Event', 'e')
                ->join('e.eventLine', 'el')
                ->leftJoin('e.member', 'm')
                ->leftJoin('e.person', 'p')
                ->where('el = :eventLine')
                ->setParameter('eventLine', $eventLine);

            $qb->andWhere('e.startDateTime > :startDateTime')
                ->setParameter('startDateTime', $searchEventModel->getStartDateTime());

            if ($searchEventModel->getEndDateTime() instanceof \DateTime) {
                $qb->andWhere('e.endDateTime < :endDateTime')
                    ->setParameter('endDateTime', $searchEventModel->getEndDateTime());
            }

            if ($searchEventModel->getMember() instanceof Member) {
                $qb->andWhere('m = :member')
                    ->setParameter('member', $searchEventModel->getMember());
            }

            if ($searchEventModel->getFrontendUser() instanceof FrontendUser) {
                $qb->andWhere('p = :person')
                    ->setParameter('person', $searchEventModel->getFrontendUser());
            }

            if ($searchEventModel->getIsConfirmed() != null) {
                if ($searchEventModel->getIsConfirmed()) {
                    $qb->andWhere("e.confirmDateTime IS NOT NULL");
                } else {
                    $qb->andWhere("e.confirmDateTime IS NULL");
                }
            }

            $qb->orderBy("e.startDateTime", $searchEventModel->isInvertOrder() ? "DESC" : "ASC");
            $qb->setMaxResults($searchEventModel->getMaxResults());

            $eventLineModel->events = $qb->getQuery()->getResult();
            $res[] = $eventLineModel;
        }

        return $res;
    }

    /**
     * add the right now active events to all passed eventLineModels
     *
     * @param EventLineModel[] $eventLineModels
     *
     * @return boolean
     */
    public function addCurrentlyActiveEvents(array $eventLineModels)
    {
        $res = false;
        foreach ($eventLineModels as $eventLineModel2) {
            $eventLine = $eventLineModel2->eventLine;
            $qb = $this->getEntityManager()->createQueryBuilder()
                ->select('e')
                ->from('App:Event', 'e')
                ->join('e.eventLine', 'el')
                ->leftJoin('e.member', 'm')
                ->leftJoin('e.person', 'p')
                ->where('el = :eventLine')
                ->setParameter('eventLine', $eventLine);

            $qb->andWhere('e.startDateTime < :startDateTime')
                ->setParameter('startDateTime', new \DateTime());

            $qb->andWhere('e.endDateTime > :endDateTime')
                ->setParameter('endDateTime', new \DateTime());

            $eventLineModel2->activeEvents = $arr = $qb->getQuery()->getResult();
            $res |= count($eventLineModel2->activeEvents);
        }

        return $res;
    }
}
