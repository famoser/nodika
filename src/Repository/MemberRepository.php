<?php

/*
 * This file is part of the nodika project.
 *
 * (c) Florian Moser <git@famoser.ch>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\Repository;

use App\Entity\Event;
use App\Entity\FrontendUser;
use App\Entity\Member;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;

/**
 * MemberRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository
{
    /**
     * @param Member $member
     * @param FrontendUser $frontendUser
     * @param int $dayThreshold
     *
     * @return \Doctrine\ORM\QueryBuilder
     * @throws \Exception
     */
    private function unconfirmedEventsQueryBuilder(Member $member, $frontendUser, $dayThreshold)
    {
        $threshHold = new \DateInterval('P' . $dayThreshold . 'D');

        $qb = $this->getEntityManager()->createQueryBuilder();

        $qb->from('App:Event', 'e')
            ->join('e.eventLine', 'el')
            ->leftJoin('e.member', 'm')
            ->where('m = :member')
            ->setParameter('member', $member);

        if ($frontendUser instanceof FrontendUser) {
            $qb->andWhere('e.frontendUser IS NULL OR e.frontendUser = :frontendUser')
                ->setParameter('frontendUser', $frontendUser);
        }

        $maxStartTime = new \DateTime();
        $maxStartTime->add($threshHold);
        $qb->andWhere('e.startDateTime < :startDateTime')
            ->setParameter('startDateTime', $maxStartTime);
        $qb->andWhere('e.isConfirmed = :isConfirmed')
            ->setParameter('isConfirmed', false);

        return $qb;
    }

    /**
     * counts the events which are not confirmed yet in the specified timespan
     *
     * @param Member $member
     * @param FrontendUser|null $frontendUser
     *
     * @param $timeSpanInDays
     * @return int
     * @throws NonUniqueResultException
     * @throws \Exception
     */
    public function countUnconfirmedEvents(Member $member, $frontendUser, $timeSpanInDays)
    {
        $qb = $this->unconfirmedEventsQueryBuilder($member, $frontendUser, $timeSpanInDays);
        $qb->select('COUNT(e)');
        return $qb->getQuery()->getSingleScalarResult();
    }
}
